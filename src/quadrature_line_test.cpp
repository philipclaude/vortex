//
//  vortex: Voronoi mesher and fluid simulator for the Earth's oceans and
//  atmosphere.
//
//  Copyright 2023 - 2025 Philip Claude Caplan
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//

#include <functional>
#include <iostream>
#include <vector>

namespace vortex {

class lineQuadrature {
 public:
  void define(int order);

  const std::vector<double>& nodes() const { return x; }
  const std::vector<double>& weights() const { return w; }

 private:
  std::vector<double> x, w;
};

void lineQuadrature::define(int order) {
  if (order < 1) order = 1;
  if (order > 12) order = 12;

  static const int sizes[12] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};
  int n = sizes[order - 1];
  x.resize(n);
  w.resize(n);

  switch (order) {
    case 1:
      x[0] = 0.;

      w[0] = 2.;

      break;

    case 2:
      x[0] = -0.577350269189626;
      x[1] = 0.577350269189626;

      w[0] = 1.0;
      w[1] = 1.0;

      break;

    case 3:
      x[0] = -0.7745966692414833770358531;
      x[1] = 0.0000000000000000000000000;
      x[2] = 0.7745966692414833770358531;

      w[0] = 0.5555555555555555555555556;
      w[1] = 0.8888888888888888888888889;
      w[2] = 0.5555555555555555555555556;

      break;

    case 4:
      x[0] = -0.8611363115940525752239465;
      x[1] = -0.3399810435848562648026658;
      x[2] = 0.3399810435848562648026658;
      x[3] = 0.8611363115940525752239465;

      w[0] = 0.3478548451374538573730639;
      w[1] = 0.6521451548625461426269361;
      w[2] = 0.6521451548625461426269361;
      w[3] = 0.3478548451374538573730639;

      break;

    case 5:

      x[0] = -0.9061798459386639927976269;
      x[1] = -0.5384693101056830910363144;
      x[2] = 0.0000000000000000000000000;
      x[3] = 0.5384693101056830910363144;
      x[4] = 0.9061798459386639927976269;

      w[0] = 0.2369268850561890875142640;
      w[1] = 0.4786286704993664680412915;
      w[2] = 0.5688888888888888888888889;
      w[3] = 0.4786286704993664680412915;
      w[4] = 0.2369268850561890875142640;

      break;

    case 6:
      x[0] = -0.9324695142031520278123016;
      x[1] = -0.6612093864662645136613996;
      x[2] = -0.2386191860831969086305017;
      x[3] = 0.2386191860831969086305017;
      x[4] = 0.6612093864662645136613996;
      x[5] = 0.9324695142031520278123016;

      w[0] = 0.1713244923791703450402961;
      w[1] = 0.3607615730481386075698335;
      w[2] = 0.4679139345726910473898703;
      w[3] = 0.4679139345726910473898703;
      w[4] = 0.3607615730481386075698335;
      w[5] = 0.1713244923791703450402961;

      break;

    case 7:
      x[0] = -0.9491079123427585245261897;
      x[1] = -0.7415311855993944398638648;
      x[2] = -0.4058451513773971669066064;
      x[3] = 0.0000000000000000000000000;
      x[4] = 0.4058451513773971669066064;
      x[5] = 0.7415311855993944398638648;
      x[6] = 0.9491079123427585245261897;

      w[0] = 0.1294849661688696932706114;
      w[1] = 0.2797053914892766679014678;
      w[2] = 0.3818300505051189449503698;
      w[3] = 0.4179591836734693877551020;
      w[4] = 0.3818300505051189449503698;
      w[5] = 0.2797053914892766679014678;
      w[6] = 0.1294849661688696932706114;

      break;

    case 8:
      x[0] = -0.9602898564975362316835609;
      x[1] = -0.7966664774136267395915539;
      x[2] = -0.5255324099163289858177390;
      x[3] = -0.1834346424956498049394761;
      x[4] = 0.1834346424956498049394761;
      x[5] = 0.5255324099163289858177390;
      x[6] = 0.7966664774136267395915539;
      x[7] = 0.9602898564975362316835609;

      w[0] = 0.1012285362903762591525314;
      w[1] = 0.2223810344533744705443560;
      w[2] = 0.3137066458778872873379622;
      w[3] = 0.3626837833783619829651504;
      w[4] = 0.3626837833783619829651504;
      w[5] = 0.3137066458778872873379622;
      w[6] = 0.2223810344533744705443560;
      w[7] = 0.1012285362903762591525314;

      break;

    case 9:
      x[0] = -0.9681602395076260898355762;
      x[1] = -0.8360311073266357942994297;
      x[2] = -0.6133714327005903973087020;
      x[3] = -0.3242534234038089290385380;
      x[4] = 0.0000000000000000000000000;
      x[5] = 0.3242534234038089290385380;
      x[6] = 0.6133714327005903973087020;
      x[7] = 0.8360311073266357942994298;
      x[8] = 0.9681602395076260898355762;

      w[0] = 0.0812743883615744119718922;
      w[1] = 0.1806481606948574040584720;
      w[2] = 0.2606106964029354623187429;
      w[3] = 0.3123470770400028400686304;
      w[4] = 0.3302393550012597631645251;
      w[5] = 0.3123470770400028400686304;
      w[6] = 0.2606106964029354623187429;
      w[7] = 0.1806481606948574040584720;
      w[8] = 0.0812743883615744119718922;

      break;

    case 10:
      x[0] = -0.9739065285171717200779640;
      x[1] = -0.8650633666889845107320967;
      x[2] = -0.6794095682990244062343274;
      x[3] = -0.4333953941292471907992659;
      x[4] = -0.1488743389816312108848260;
      x[5] = 0.1488743389816312108848260;
      x[6] = 0.4333953941292471907992659;
      x[7] = 0.6794095682990244062343274;
      x[8] = 0.8650633666889845107320967;
      x[9] = 0.9739065285171717200779640;

      w[0] = 0.0666713443086881375935688;
      w[1] = 0.1494513491505805931457763;
      w[2] = 0.2190863625159820439955349;
      w[3] = 0.2692667193099963550912269;
      w[4] = 0.2955242247147528701738930;
      w[5] = 0.2955242247147528701738930;
      w[6] = 0.2692667193099963550912269;
      w[7] = 0.2190863625159820439955349;
      w[8] = 0.1494513491505805931457763;
      w[9] = 0.0666713443086881375935688;

      break;

    case 11:
      x[0] = -0.9782286581460569928039380;
      x[1] = -0.8870625997680952990751578;
      x[2] = -0.7301520055740493240934162;
      x[3] = -0.5190961292068118159257257;
      x[4] = -0.2695431559523449723315320;
      x[5] = 0.0000000000000000000000000;
      x[6] = 0.2695431559523449723315320;
      x[7] = 0.5190961292068118159257257;
      x[8] = 0.7301520055740493240934163;
      x[9] = 0.8870625997680952990751578;
      x[10] = 0.9782286581460569928039380;

      w[0] = 0.0556685671161736664827537;
      w[1] = 0.1255803694649046246346943;
      w[2] = 0.1862902109277342514260976;
      w[3] = 0.2331937645919904799185237;
      w[4] = 0.2628045445102466621806889;
      w[5] = 0.2729250867779006307144835;
      w[6] = 0.2628045445102466621806889;
      w[7] = 0.2331937645919904799185237;
      w[8] = 0.1862902109277342514260980;
      w[9] = 0.1255803694649046246346940;
      w[10] = 0.0556685671161736664827537;

      break;

    case 12:
      x[0] = -0.9815606342467192506905491;
      x[1] = -0.9041172563704748566784659;
      x[2] = -0.7699026741943046870368938;
      x[3] = -0.5873179542866174472967024;
      x[4] = -0.3678314989981801937526915;
      x[5] = -0.1252334085114689154724414;
      x[6] = 0.1252334085114689154724414;
      x[7] = 0.3678314989981801937526915;
      x[8] = 0.5873179542866174472967024;
      x[9] = 0.7699026741943046870368938;
      x[10] = 0.9041172563704748566784659;
      x[11] = 0.9815606342467192506905491;

      w[0] = 0.0471753363865118271946160;
      w[1] = 0.1069393259953184309602547;
      w[2] = 0.1600783285433462263346525;
      w[3] = 0.2031674267230659217490645;
      w[4] = 0.2334925365383548087608499;
      w[5] = 0.2491470458134027850005624;
      w[6] = 0.2491470458134027850005624;
      w[7] = 0.2334925365383548087608499;
      w[8] = 0.2031674267230659217490645;
      w[9] = 0.1600783285433462263346525;
      w[10] = 0.1069393259953184309602547;
      w[11] = 0.0471753363865118271946160;

      break;
  }
};
double integrate(double a, double b, int order,
                 const std::function<double(double)>& f) {
  lineQuadrature quad;
  quad.define(order);
  const auto& x = quad.nodes();
  const auto& w = quad.weights();
  double result = 0.0;
  for (size_t i = 0; i < x.size(); ++i) {
    double xi = 0.5 * (b - a) * x[i] + 0.5 * (b + a);
    result += w[i] * f(xi);
  }
  result *= 0.5 * (b - a);
  return result;
}

}  // namespace vortex

int main() {
  using namespace vortex;
  auto function = [](double x) { return x * x; };
  double answer = 1.0 / 3.0;
  for (int order = 1; order <= 12; ++order) {
    double quadrature_answer = integrate(0.0, 1.0, order, function);
    std::cout << "order: " << order << ", "
              << "quadrature answer = " << quadrature_answer << ", "
              << "error = " << std::abs(quadrature_answer - answer)
              << std::endl;
  }
  return 0;
}